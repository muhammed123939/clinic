// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("API.entities.Admins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("storeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Store_Id");

                    b.HasKey("Id");

                    b.HasIndex("storeId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("API.entities.Appointments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("patientcase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("patientcomment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("API.entities.CaseDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Case")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeAdded")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CaseDescription");
                });

            modelBuilder.Entity("API.entities.Doctors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoctorPrice")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("FieldId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("API.entities.Fields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("API.entities.Groups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("API.entities.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("API.entities.Patients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("API.entities.Photos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("publicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("API.entities.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("API.entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Doctors")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("API.entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("CaseDescriptionDoctors", b =>
                {
                    b.Property<int>("CaseDescriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoctorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CaseDescriptionId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("CaseDescriptionDoctors");
                });

            modelBuilder.Entity("CaseDescriptionPatients", b =>
                {
                    b.Property<int>("CaseDescriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CaseDescriptionId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("CaseDescriptionPatients");
                });

            modelBuilder.Entity("DoctorsPatients", b =>
                {
                    b.Property<int>("DoctorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DoctorsId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("DoctorsPatients");
                });

            modelBuilder.Entity("API.entities.Admins", b =>
                {
                    b.HasOne("API.entities.Store", "store")
                        .WithMany("Admins")
                        .HasForeignKey("storeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("store");
                });

            modelBuilder.Entity("API.entities.Appointments", b =>
                {
                    b.HasOne("API.entities.Admins", "Admins")
                        .WithMany("appointments")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.entities.Doctors", "Doctors")
                        .WithMany("appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.entities.Patients", "Patients")
                        .WithMany("appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admins");

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("API.entities.Doctors", b =>
                {
                    b.HasOne("API.entities.Admins", "Admins")
                        .WithMany("Doctors")
                        .HasForeignKey("AdminId");

                    b.HasOne("API.entities.Fields", "Fields")
                        .WithMany("Doctors")
                        .HasForeignKey("FieldId");

                    b.Navigation("Admins");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("API.entities.Orders", b =>
                {
                    b.HasOne("API.entities.Admins", "Admins")
                        .WithMany("orders")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.entities.Products", "Products")
                        .WithMany("orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admins");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.entities.Patients", b =>
                {
                    b.HasOne("API.entities.Admins", "Admins")
                        .WithMany("Patients")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admins");
                });

            modelBuilder.Entity("API.entities.Photos", b =>
                {
                    b.HasOne("API.entities.Doctors", "Doctors")
                        .WithOne("Photos")
                        .HasForeignKey("API.entities.Photos", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("API.entities.Products", b =>
                {
                    b.HasOne("API.entities.Groups", "Groups")
                        .WithMany("Products")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.entities.Store", "store")
                        .WithOne("Products")
                        .HasForeignKey("API.entities.Products", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("store");
                });

            modelBuilder.Entity("API.entities.Schedule", b =>
                {
                    b.HasOne("API.entities.Doctors", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("CaseDescriptionDoctors", b =>
                {
                    b.HasOne("API.entities.CaseDescription", null)
                        .WithMany()
                        .HasForeignKey("CaseDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.entities.Doctors", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CaseDescriptionPatients", b =>
                {
                    b.HasOne("API.entities.CaseDescription", null)
                        .WithMany()
                        .HasForeignKey("CaseDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.entities.Patients", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorsPatients", b =>
                {
                    b.HasOne("API.entities.Doctors", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.entities.Patients", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.entities.Admins", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");

                    b.Navigation("appointments");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("API.entities.Doctors", b =>
                {
                    b.Navigation("Photos")
                        .IsRequired();

                    b.Navigation("Schedules");

                    b.Navigation("appointments");
                });

            modelBuilder.Entity("API.entities.Fields", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("API.entities.Groups", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.entities.Patients", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("API.entities.Products", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("API.entities.Store", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Products")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
